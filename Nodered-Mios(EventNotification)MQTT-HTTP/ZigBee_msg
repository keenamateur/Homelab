if (!msg.topic || typeof msg.topic !== "string") {
    return null;
}

const topicParts = msg.topic.split('/');
if (topicParts.length !== 2 || topicParts[0] !== "z2mqtt") {
    return null;
}

const deviceParts = topicParts[1].split('_');
if (deviceParts.length !== 2) {
    return null;
}

const room = deviceParts[0];
const avdevicename = deviceParts[1]; 
const type = "Zigbee2mqtt";

const allowedRooms = ["Nappali", "Konyha", "Fürdő", "Háló", "Terasz", "Biztonság", "Műhely", "Garázs", "Áram", "Szerver", "Szenzor", "Sátor"];

if (!allowedRooms.includes(room)) {
    return null; // Ha a szoba nem engedélyezett, ne küldjünk semmit
}


if (!msg.payload || typeof msg.payload !== "object" || !msg.payload.state) {
    return null;
}

let avnewstatus;
if (msg.payload.state === "OFF") {
    avnewstatus = 0;
} else if (msg.payload.state === "ON") {
    avnewstatus = msg.payload.brightness !== undefined ? msg.payload.brightness : 100;
} else {
    return null; // Érvénytelen állapot
}

let port = 1905;
let ip = global.get("con_ip"); // || msg.payload;

if (!ip || typeof ip !== "string" || !ip.match(/^(\d{1,3}\.){3}\d{1,3}$/)) {
    return null;
}

let url = `http://${ip}:${port}`;

return {
    payload: {
        room: room,
        avdevicename: avdevicename,
        avnewstatus: avnewstatus,
        type: type
    },
    url: url,
    _original: {
        topic: msg.topic,
        payload: msg.payload
    }
};
