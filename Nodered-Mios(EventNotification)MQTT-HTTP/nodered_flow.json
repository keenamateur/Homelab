[
    {
        "id": "0c26b46cb750ccc4",
        "type": "tab",
        "label": "MIOS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d1034dc093a8bf1a",
        "type": "change",
        "z": "0c26b46cb750ccc4",
        "name": "device_status",
        "rules": [
            {
                "t": "set",
                "p": "con_ip",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 280,
        "wires": [
            [
                "532d09053ef13bef"
            ]
        ]
    },
    {
        "id": "92638bdc5b2bd1b4",
        "type": "http request",
        "z": "0c26b46cb750ccc4",
        "name": "vera_ac",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1400,
        "y": 320,
        "wires": [
            [
                "afd04525a5aa45cb"
            ]
        ]
    },
    {
        "id": "d9600be2354c3dbe",
        "type": "file",
        "z": "0c26b46cb750ccc4",
        "name": "write_con_ip",
        "filename": "srv/con_ip",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 330,
        "y": 280,
        "wires": [
            [
                "e0243b7f48eab63e"
            ]
        ]
    },
    {
        "id": "20c84ab6f963d049",
        "type": "mqtt in",
        "z": "0c26b46cb750ccc4",
        "name": "con_type-mqtt:52888",
        "topic": "con_ip",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4644b114d998fd7b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 280,
        "wires": [
            [
                "d9600be2354c3dbe"
            ]
        ]
    },
    {
        "id": "8b7d67266d612ece",
        "type": "inject",
        "z": "0c26b46cb750ccc4",
        "name": "Inject IP",
        "props": [],
        "repeat": "45",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 320,
        "wires": [
            [
                "e0243b7f48eab63e"
            ]
        ]
    },
    {
        "id": "e0243b7f48eab63e",
        "type": "file in",
        "z": "0c26b46cb750ccc4",
        "name": "read_con_ip",
        "filename": "srv/con_ip",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 570,
        "y": 280,
        "wires": [
            [
                "d1034dc093a8bf1a"
            ]
        ]
    },
    {
        "id": "fedfaf6bcbb3b30a",
        "type": "function",
        "z": "0c26b46cb750ccc4",
        "name": "AOI-JOIN",
        "func": "if (typeof msg.topic !== \"string\" || msg.topic.trim() === \"\") {\n    return null;\n}\n\nlet regex = /^([^:]+):([^:]+):([^:]+)$/;\n\nlet match = msg.topic.match(regex);\n\nif (match) {\n    let room = match[1];\n    let device = match[2];\n    let type = match[3];\n    let state = msg.payload;\n\n    // Allow only specific types\n    if (type !== \"Status\" && type !== \"LoadLevelStatus\" && type !== \"Tripped\" && type !== \"CurrentTemperature\") {\n        return null;\n    }\n\n    if (state === true) state = 1;\n    else if (state === false) state = 0;\n\n    // Creata joinMessage/structure\n    let joinMessage = `vera up=:=${room}=:=${device}=:=${state}`;\n\n    msg.payload = joinMessage;\n    msg.text = joinMessage;\n\n    return msg;\n\n} else {\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 240,
        "wires": [
            [
                "e4f9d83746e3d57d"
            ]
        ]
    },
    {
        "id": "532d09053ef13bef",
        "type": "switch",
        "z": "0c26b46cb750ccc4",
        "name": "",
        "property": "con_ip",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "payload",
                "vt": "msg"
            },
            {
                "t": "eq",
                "v": "192.0.0.2",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "192.168|10",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 970,
        "y": 280,
        "wires": [
            [
                "8320d9d5e3d92c71"
            ],
            [
                "fedfaf6bcbb3b30a",
                "a7e503d6da2df2d0"
            ],
            [
                "3dd80e6d7b8a49cb",
                "2cbf3b975da73e45",
                "a7e503d6da2df2d0"
            ]
        ]
    },
    {
        "id": "8320d9d5e3d92c71",
        "type": "debug",
        "z": "0c26b46cb750ccc4",
        "name": "con_ip",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 200,
        "wires": []
    },
    {
        "id": "afd04525a5aa45cb",
        "type": "debug",
        "z": "0c26b46cb750ccc4",
        "name": "http vera_ac",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 320,
        "wires": []
    },
    {
        "id": "2b07366af7ab9cee",
        "type": "mios-in",
        "z": "0c26b46cb750ccc4",
        "name": "Nappali:AC",
        "server": "dfaffd1ad684d9c7",
        "item": "Nappali:AC",
        "exact": false,
        "x": 750,
        "y": 100,
        "wires": [
            [
                "532d09053ef13bef"
            ]
        ]
    },
    {
        "id": "0fd48f53a0602eec",
        "type": "mios-in",
        "z": "0c26b46cb750ccc4",
        "name": "Konyha:AC",
        "server": "dfaffd1ad684d9c7",
        "item": "Konyha:AC",
        "exact": false,
        "x": 750,
        "y": 40,
        "wires": [
            [
                "532d09053ef13bef"
            ]
        ]
    },
    {
        "id": "19fc8f66167ab518",
        "type": "mios-in",
        "z": "0c26b46cb750ccc4",
        "name": "Fürdő",
        "server": "dfaffd1ad684d9c7",
        "item": "Fürdő:AC",
        "exact": false,
        "x": 730,
        "y": 220,
        "wires": [
            [
                "532d09053ef13bef"
            ]
        ]
    },
    {
        "id": "bfb3df5153eb0425",
        "type": "mios-in",
        "z": "0c26b46cb750ccc4",
        "name": "Háló:AC",
        "server": "dfaffd1ad684d9c7",
        "item": "Háló:AC",
        "exact": false,
        "x": 740,
        "y": 160,
        "wires": [
            [
                "532d09053ef13bef"
            ]
        ]
    },
    {
        "id": "4810c557ce2bedcd",
        "type": "mios-in",
        "z": "0c26b46cb750ccc4",
        "name": "Garázs",
        "server": "dfaffd1ad684d9c7",
        "item": "Garázs:AC",
        "exact": false,
        "x": 730,
        "y": 500,
        "wires": [
            [
                "532d09053ef13bef"
            ]
        ]
    },
    {
        "id": "55f0aa6e658d2737",
        "type": "mios-in",
        "z": "0c26b46cb750ccc4",
        "name": "Műhely",
        "server": "dfaffd1ad684d9c7",
        "item": "Műhely:AC",
        "exact": false,
        "x": 730,
        "y": 440,
        "wires": [
            [
                "532d09053ef13bef"
            ]
        ]
    },
    {
        "id": "1bac663d3b4484bd",
        "type": "mios-in",
        "z": "0c26b46cb750ccc4",
        "name": "Terasz",
        "server": "dfaffd1ad684d9c7",
        "item": "Terasz:AC",
        "exact": false,
        "x": 730,
        "y": 380,
        "wires": [
            [
                "532d09053ef13bef"
            ]
        ]
    },
    {
        "id": "1f315b4d834bdf14",
        "type": "mios-in",
        "z": "0c26b46cb750ccc4",
        "name": "Biztonság",
        "server": "dfaffd1ad684d9c7",
        "item": "Biztonság:",
        "exact": false,
        "x": 740,
        "y": 320,
        "wires": [
            [
                "532d09053ef13bef"
            ]
        ]
    },
    {
        "id": "3dd80e6d7b8a49cb",
        "type": "function",
        "z": "0c26b46cb750ccc4",
        "name": "vera_ac",
        "func": "// Check if the topic is a string and not empty\nif (typeof msg.topic !== \"string\" || msg.topic.trim() === \"\") {\n    return null; // Ha nincs topic, ne küldjünk semmit\n}\n\n// Regex format: room:avdevicename:type\nlet regex = /^([^:]+):([^:]+):([^:]+)$/;\n\n// Check if the topic matches the regex\nlet match = msg.topic.match(regex);\n\nif (match) {\n    let room = match[1];\n    let avdevicename = match[2];\n    let type = match[3];\n    let avnewstatus = msg.payload;\n\n\n    // List of allowed rooms\n    const allowedRooms = [\"Nappali\", \"Konyha\", \"Fürdő\", \"Háló\", \"Terasz\", \"Biztonság\", \"Műhely\", \"Garázs\", \"Áram\", \"Szerver\", \"Szenzor\"];\n\n    // Only process if the room is one of the allowed rooms\n    if (!allowedRooms.includes(room)) {\n        return null; // Ha a szoba nem engedélyezett, ne küldjünk semmit\n    }\n\n    // Only process if the type is one of the allowed types\n    const allowedTypes = [\"Status\", \"LoadLevelStatus\"];\n    if (!allowedTypes.includes(type)) {\n        return null;\n    }\n    // If the device name contains \"Fali\" and the type is \"LoadLevelStatus\"\n    if (avdevicename.includes(\"Fali\") && type === \"LoadLevelStatus\") {\n        // Az érték megtartása\n        avnewstatus = parseFloat(avnewstatus);\n    }\n    // If the device name does not contain \"Fali\" and the type is \"LoadLevelStatus\"\n    else if (avdevicename.includes(\"Fali\") && type === \"Status\") {\n        // If the type is \"Status\" and the device name contains \"Fali\"\n        // we convert the boolean value to 1 or 0\n        if (avnewstatus === true) avnewstatus = 1;\n        else if (avnewstatus === false) avnewstatus = 0;\n    }\n    else if (type === \"Status\") {\n        if (avnewstatus === true) avnewstatus = 1;\n        else if (avnewstatus === false) avnewstatus = 0;\n    }\n    // If the type is \"LoadLevelStatus\" and the device name does not contain \"Fali\"\n    else if (type === \"Watts\" || type === \"Volts\" || type === \"Tripped\") {\n        avnewstatus = parseFloat(avnewstatus);\n    }\n    else {\n        return null;\n    }\n\n    // Port\n    let port = 1900;\n\n    // Get IP address from flow context or msg.payload \n\n    let ip = flow.get(\"con_ip\") || msg.payload;  // If the IP is not in flow context, use msg.payload\n\n    if (!ip || typeof ip !== \"string\" || !ip.match(/^(\\d{1,3}\\.){3}\\d{1,3}$/)) {\n        return null; // If the IP is not valid, return null\n    }\n\n    // Create URL \n    let url = `http://${ip}:${port}`;\n\n    // New message\n    let newMsg = {\n        payload: {\n            room: room,\n            avdevicename: avdevicename,\n            avnewstatus: avnewstatus,\n            type: type  // Add type to payload , some Dimmer devices send \"LoadLevelStatus\" as \"Status\" \n        },\n        url: url  // URL\n    };\n\n    return newMsg;\n} else {\n    return null; // If regex does not match, return null\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 320,
        "wires": [
            [
                "92638bdc5b2bd1b4",
                "284e2d3a813eecf2"
            ]
        ]
    },
    {
        "id": "281277974045bbea",
        "type": "mios-in",
        "z": "0c26b46cb750ccc4",
        "name": "Áram:AC",
        "server": "dfaffd1ad684d9c7",
        "item": "Áram:AC",
        "exact": false,
        "x": 740,
        "y": 560,
        "wires": [
            [
                "532d09053ef13bef"
            ]
        ]
    },
    {
        "id": "4894f545d488f1e8",
        "type": "http request",
        "z": "0c26b46cb750ccc4",
        "name": "vera_security",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1410,
        "y": 360,
        "wires": [
            [
                "a9a7d8a7b4314fdb"
            ]
        ]
    },
    {
        "id": "a9a7d8a7b4314fdb",
        "type": "debug",
        "z": "0c26b46cb750ccc4",
        "name": "vera_security",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 360,
        "wires": []
    },
    {
        "id": "2cbf3b975da73e45",
        "type": "function",
        "z": "0c26b46cb750ccc4",
        "name": "vera_security",
        "func": "// Ellenőrizzük, hogy a msg.topic létezik-e\nif (typeof msg.topic !== \"string\" || msg.topic.trim() === \"\") {\n    return null; // Ha nincs topic, ne küldjünk semmit\n}\n\n// Regex az üzenetek feldolgozására\nlet regex = /^([^:]+):([^:]+):([^:]+)$/;\n\n// Ellenőrzés, hogy illeszkedik-e a minta\nlet match = msg.topic.match(regex);\n\nif (match) {\n    let room = match[1];   // Helyiség neve (pl. Konyha, Nappali, Fürdő)\n    let avdevicename = match[2]; // Eszköz neve (pl. ACK_FaliLámpa, ACF_FaliLámpa)\n    let type = match[3];   // Az utolsó rész (pl. Status, LoadLevelStatus, stb.)\n    let avnewstatus = msg.payload;  // Az állapot (boolean vagy szám)\n\n\n    // Engedélyezett szobák listája\n    const allowedRooms = [\"Nappali\", \"Konyha\", \"Fürdő\", \"Háló\", \"Terasz\", \"Biztonság\", \"Műhely\", \"Garázs\", \"Áram\", \"Szerver\", \"Szenzor\"];\n\n    // Csak akkor folytatjuk, ha a szoba engedélyezett\n    if (!allowedRooms.includes(room)) {\n        return null; // Ha a szoba nem engedélyezett, ne küldjünk semmit\n    }\n\n    // Csak a megadott típusokat engedjük át\n    //const allowedTypes = [\"Status\", \"LoadLevelStatus\", \"Tripped\", \"CurrentTemperature\", \"CurrentHumidity\", \"Watts\", \"Volts\"];\n    //if (!allowedTypes.includes(type)) {\n    //    return null;\n    //}\n    // Csak a megadott típusokat engedjük át\n    const allowedTypes = [\"Tripped\"];\n    if (!allowedTypes.includes(type)) {\n        return null;\n    }\n    // Ha az eszköznév tartalmazza a \"Fali\" szót és a típus \"LoadLevelStatus\",\n    // akkor ezt használjuk az állapotként minden esetben\n    if (avdevicename.includes(\"Fali\") && type === \"LoadLevelStatus\") {\n        // Az érték megtartása\n        avnewstatus = parseFloat(avnewstatus);\n    } \n    // Ha a típus \"Status\" és boolean, alakítsuk számmá\n    else if (type === \"Status\") {\n        if (avnewstatus === true) avnewstatus = 1;\n        else if (avnewstatus === false) avnewstatus = 0;\n    }\n    // Ha a típus \"Watts\" vagy \"Volts\", akkor is küldjük tovább\n    else if (type === \"Watts\" || type === \"Volts\" || type === \"Tripped\") {\n        avnewstatus = parseFloat(avnewstatus);\n    }\n    // Egyéb esetekben nem küldünk tovább\n    else {\n        return null;\n    }\n\n    // Port változó létrehozása\n    let port = 1901;\n\n    // IP cím meghatározása flow változóból\n    let ip = flow.get(\"con_ip\") || msg.payload;  // Ha nincs flow változó, akkor msg.payload-ból vesszük\n\n    // Ellenőrizzük, hogy van-e érvényes IP-cím\n    if (!ip || typeof ip !== \"string\" || !ip.match(/^(\\d{1,3}\\.){3}\\d{1,3}$/)) {\n        return null; // Ha nincs érvényes IP, ne küldjünk semmit\n    }\n\n    // URL létrehozása\n    let url = `http://${ip}:${port}`;\n\n    // Az új üzenet objektum létrehozása\n    let newMsg = {\n        payload: {\n            room: room,\n            avdevicename: avdevicename,\n            avnewstatus: avnewstatus,\n            type: type  // Hozzáadjuk a típust is, hogy tudjuk kezelni a fogadó oldalon\n        },\n        url: url  // Dinamikus URL beállítása a HTTP Request node-hoz\n    };\n\n    return newMsg;\n} else {\n    return null; // Ha az adat nem felel meg a regex mintának, nem küldünk tovább üzenetet\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 360,
        "wires": [
            [
                "4894f545d488f1e8"
            ]
        ]
    },
    {
        "id": "a7e503d6da2df2d0",
        "type": "function",
        "z": "0c26b46cb750ccc4",
        "name": "vera_ac_influxdb",
        "func": "// Function to convert Vera device messages to InfluxDB format\n\n\n// Validate input message\nif (typeof msg.topic !== \"string\" || msg.topic.trim() === \"\") {\n    return null;\n}\n\n// Parse the topic using regex\nconst topicRegex = /^([^:]+):([^:]+):([^:]+)$/;\nconst match = msg.topic.match(topicRegex);\n\nif (!match) {\n    return null;\n}\n\nconst [_, room, device, parameter] = match;\nlet value = msg.payload;\n\n// List of allowed rooms and parameters\nconst allowedRooms = [\"Nappali\", \"Konyha\", \"Fürdő\", \"Háló\", \"Terasz\",\n    \"Biztonság\", \"Műhely\", \"Garázs\", \"Áram\", \"Szerver\", \"Szenzor\"];\nconst allowedParameters = [\"Status\", \"LoadLevelStatus\", \"Tripped\"];\n\n// Validate room and parameter\nif (!allowedRooms.includes(room) || !allowedParameters.includes(parameter)) {\n    return null;\n}\n\n// Enhanced value conversion\nconst convertValue = (val, param) => {\n    // Handle boolean values\n    if (typeof val === 'boolean') {\n        return val ? 1 : 0;\n    }\n\n    // Handle string representations\n    if (typeof val === 'string') {\n        val = val.trim().toLowerCase();\n        if (val === 'true') return 1;\n        if (val === 'false') return 0;\n        if (val === 'on') return 1;\n        if (val === 'off') return 0;\n    }\n\n    // Convert to number for numeric parameters\n    const numericParams = [\"Watts\", \"Volts\", \"CurrentTemperature\", \"CurrentHumidity\",\n        \"LoadLevelStatus\", \"Amp\", \"KWHReading\", \"Light\", \"BatteryLevel\"];\n    if (numericParams.includes(param)) {\n        const num = parseFloat(val);\n        return isNaN(num) ? null : num;\n    }\n\n    return val;\n};\n\nvalue = convertValue(value, parameter);\n\n// Skip if we couldn't get a valid value\nif (value === null || value === undefined) {\n    return null;\n}\n\n// Create InfluxDB data structure\nconst timestamp = Date.now();\nconst measurement = \"vera_ac\";\n\n// Get previous device data from context\nconst previousData = context.get(device) || { fields: {} };\n\n// Prepare the data point\nconst dataPoint = {\n    measurement,\n    tags: {\n        room,\n        device\n    },\n    fields: {\n        ...previousData.fields,\n        [parameter]: value\n    },\n    timestamp\n};\n\n// Store current data in context for future messages\ncontext.set(device, dataPoint);\n\n// Prepare the InfluxDB payload\nconst output = {\n    bucket: 'veradata',\n    precision: 'ms',\n    data: [dataPoint]\n};\n\n// Add additional metadata if needed\nif (parameter === 'LoadLevelStatus' && device.includes('Fali')) {\n    output.data[0].fields['brightness'] = value;\n}\n\nif (parameter === 'Status') {\n    output.data[0].fields['power'] = value ? 'on' : 'off';\n}\n\nreturn { payload: output };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 400,
        "wires": [
            [
                "07c20a9fe0378662"
            ]
        ]
    },
    {
        "id": "cb17ab31dc82134c",
        "type": "debug",
        "z": "0c26b46cb750ccc4",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 400,
        "wires": []
    },
    {
        "id": "284e2d3a813eecf2",
        "type": "debug",
        "z": "0c26b46cb750ccc4",
        "name": "vera_ac",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 280,
        "wires": []
    },
    {
        "id": "e4f9d83746e3d57d",
        "type": "join-message",
        "z": "0c26b46cb750ccc4",
        "name": "vera_ac",
        "text": "",
        "title": "",
        "url": "",
        "notificationicon": "",
        "joinConfig": "ddf6c62463d695e5",
        "x": 1400,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "07c20a9fe0378662",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "0c26b46cb750ccc4",
        "server": "8d9e262ae3ae230d",
        "name": "inf_vera_ac",
        "x": 1410,
        "y": 400,
        "wires": [
            [
                "cb17ab31dc82134c"
            ]
        ]
    },
    {
        "id": "338720d2b4db283d",
        "type": "function",
        "z": "0c26b46cb750ccc4",
        "name": "influxdb",
        "func": "// Function to convert Vera device messages to InfluxDB format\n\n\n// Validate input message\nif (typeof msg.topic !== \"string\" || msg.topic.trim() === \"\") {\n    return null;\n}\n\n// Parse the topic using regex\nconst topicRegex = /^([^:]+):([^:]+):([^:]+)$/;\nconst match = msg.topic.match(topicRegex);\n\nif (!match) {\n    return null;\n}\n\nconst [_, room, device, parameter] = match;\nlet value = msg.payload;\n\n// List of allowed rooms and parameters\nconst allowedRooms = [\"Nappali\", \"Konyha\", \"Fürdő\", \"Háló\", \"Terasz\",\n    \"Biztonság\", \"Műhely\", \"Garázs\", \"Áram\", \"Szerver\", \"Szenzor\"];\nconst allowedParameters = [\"Status\", \"LoadLevelStatus\", \"Tripped\"];\n\n// Validate room and parameter\nif (!allowedRooms.includes(room) || !allowedParameters.includes(parameter)) {\n    return null;\n}\n\n// Enhanced value conversion\nconst convertValue = (val, param) => {\n    // Handle boolean values\n    if (typeof val === 'boolean') {\n        return val ? 1 : 0;\n    }\n\n    // Handle string representations\n    if (typeof val === 'string') {\n        val = val.trim().toLowerCase();\n        if (val === 'true') return 1;\n        if (val === 'false') return 0;\n        if (val === 'on') return 1;\n        if (val === 'off') return 0;\n    }\n\n    // Convert to number for numeric parameters\n    const numericParams = [\"Watts\", \"Volts\", \"CurrentTemperature\", \"CurrentHumidity\",\n        \"LoadLevelStatus\", \"Amp\", \"KWHReading\", \"Light\", \"BatteryLevel\"];\n    if (numericParams.includes(param)) {\n        const num = parseFloat(val);\n        return isNaN(num) ? null : num;\n    }\n\n    return val;\n};\n\nvalue = convertValue(value, parameter);\n\n// Skip if we couldn't get a valid value\nif (value === null || value === undefined) {\n    return null;\n}\n\n// Create InfluxDB data structure\nconst timestamp = Date.now();\nconst measurement = \"vera_ac\";\n\n// Get previous device data from context\nconst previousData = context.get(device) || { fields: {} };\n\n// Prepare the data point\nconst dataPoint = {\n    measurement,\n    tags: {\n        room,\n        device\n    },\n    fields: {\n        ...previousData.fields,\n        [parameter]: value\n    },\n    timestamp\n};\n\n// Store current data in context for future messages\ncontext.set(device, dataPoint);\n\n// Prepare the InfluxDB payload\nconst output = {\n    bucket: 'veradata',\n    precision: 'ms',\n    data: [dataPoint]\n};\n\n// Add additional metadata if needed\nif (parameter === 'LoadLevelStatus' && device.includes('Fali')) {\n    output.data[0].fields['brightness'] = value;\n}\n\nif (parameter === 'Status') {\n    output.data[0].fields['power'] = value ? 'on' : 'off';\n}\n\nreturn { payload: output };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 100,
        "wires": [
            [
                "634e1551d4546be3",
                "2aa1939a43df2568"
            ]
        ]
    },
    {
        "id": "a0b627ca5bea305f",
        "type": "mios-in",
        "z": "0c26b46cb750ccc4",
        "name": "",
        "server": "dfaffd1ad684d9c7",
        "item": "",
        "exact": false,
        "x": 1010,
        "y": 100,
        "wires": [
            [
                "338720d2b4db283d"
            ]
        ]
    },
    {
        "id": "2b2c4d674e29496a",
        "type": "debug",
        "z": "0c26b46cb750ccc4",
        "name": "vera_full",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 100,
        "wires": []
    },
    {
        "id": "634e1551d4546be3",
        "type": "debug",
        "z": "0c26b46cb750ccc4",
        "name": "influxdb",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 60,
        "wires": []
    },
    {
        "id": "2aa1939a43df2568",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "0c26b46cb750ccc4",
        "server": "8d9e262ae3ae230d",
        "name": "vera_full",
        "x": 1400,
        "y": 100,
        "wires": [
            [
                "2b2c4d674e29496a"
            ]
        ]
    },
    {
        "id": "70be4efe165d8c3b",
        "type": "http request",
        "z": "0c26b46cb750ccc4",
        "name": "request_mios_data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://192.168.4.10:3480/data_request?id=lu_sdata&output_format=json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 620,
        "wires": [
            [
                "6445dbf74e169f94"
            ]
        ]
    },
    {
        "id": "cdd529a3eac792d5",
        "type": "file",
        "z": "0c26b46cb750ccc4",
        "name": "",
        "filename": "srv/vera_full.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1180,
        "y": 620,
        "wires": [
            [
                "5eb9c8fc43baf3ac"
            ]
        ]
    },
    {
        "id": "6445dbf74e169f94",
        "type": "function",
        "z": "0c26b46cb750ccc4",
        "name": "vera_data_All",
        "func": "\n\n// Main process\nfunction processVeraData(rawData) {\n    // Helper functions\n    const getCategoryName = (id) => {\n        const cat = (rawData.categories || []).find(c => c.id === id);\n        return cat ? cat.name : `Unknown (${id})`;\n    };\n\n    const getRoomName = (id) => {\n        const room = (rawData.rooms || []).find(r => r.id === id);\n        return room ? room.name : `Unknown (${id})`;\n    };\n\n    const parseNumber = (val) => {\n        if (val === \"\" || val === null || val === undefined) return null;\n        const num = parseFloat(val);\n        return isNaN(num) ? null : num;\n    };\n\n    // Process rooms\n    const rooms = (rawData.rooms || []).map(room => ({\n        id: room.id,\n        name: room.name,\n        section: room.section || null\n    }));\n\n    // Process scenes\n    const scenes = (rawData.scenes || []).map(scene => ({\n        id: scene.id,\n        name: scene.name,\n        room: getRoomName(scene.room),\n        roomId: scene.room,\n        active: scene.active === 1,\n        state: scene.state || null,\n        comment: scene.comment || \"\"\n    }));\n\n    // Process devices and sensors\n    const devices = [];\n    const sensors = {\n        temperature: [],\n        humidity: [],\n        light: [],\n        power: [],\n        motion: [],\n        door: []\n    };\n\n    (rawData.devices || []).forEach(device => {\n        // Base device info\n        const deviceInfo = {\n            id: device.id,\n            altId: device.altid || null,\n            name: device.name,\n            category: {\n                id: device.category,\n                name: getCategoryName(device.category)\n            },\n            subcategory: device.subcategory,\n            room: getRoomName(device.room),\n            roomId: device.room,\n            status: device.status || null,\n            state: device.state || null,\n            configured: device.configured === \"1\",\n            commFailure: device.commFailure === \"1\",\n            parent: device.parent || null,\n            comment: device.comment || \"\"\n        };\n\n        // Process measurements\n        const watts = parseNumber(device.watts);\n        const kwh = parseNumber(device.kwh);\n        const light = parseNumber(device.light);\n        const humidity = parseNumber(device.humidity);\n        const temperature = parseNumber(device.temperature);\n        const battery = parseNumber(device.batterylevel);\n        const level = parseNumber(device.level);\n\n        if (watts !== null) deviceInfo.watts = watts;\n        if (kwh !== null) deviceInfo.kwh = kwh;\n        if (light !== null) deviceInfo.light = light;\n        if (humidity !== null) deviceInfo.humidity = humidity;\n        if (temperature !== null) deviceInfo.temperature = temperature;\n        if (battery !== null) deviceInfo.battery = battery;\n\n        // Add level for dimmer devices (category 2)\n        if (device.category === 2 && level !== null) {\n            deviceInfo.level = level;\n        }\n\n        // Add to devices array\n        devices.push(deviceInfo);\n\n        // Organize sensor data\n        if (temperature !== null) {\n            sensors.temperature.push({\n                deviceId: device.id,\n                deviceName: device.name,\n                value: temperature,\n                unit: \"°C\",\n                timestamp: new Date().toISOString()\n            });\n        }\n\n        if (humidity !== null) {\n            sensors.humidity.push({\n                deviceId: device.id,\n                deviceName: device.name,\n                value: humidity,\n                unit: \"%\",\n                timestamp: new Date().toISOString()\n            });\n        }\n\n        if (light !== null) {\n            sensors.light.push({\n                deviceId: device.id,\n                deviceName: device.name,\n                value: light,\n                unit: \"lux\",\n                timestamp: new Date().toISOString()\n            });\n        }\n\n        if (watts !== null) {\n            sensors.power.push({\n                deviceId: device.id,\n                deviceName: device.name,\n                watts: watts,\n                kwh: kwh,\n                timestamp: new Date().toISOString()\n            });\n        }\n\n        // Special handling for motion and door sensors\n        if (device.category === 4) {\n            const sensorData = {\n                deviceId: device.id,\n                deviceName: device.name,\n                tripped: device.tripped === \"1\",\n                armed: device.armed === \"1\",\n                lastTrip: device.lasttrip || null,\n                battery: battery\n            };\n\n            if (device.subcategory === 1) { // Door sensors\n                sensors.door.push(sensorData);\n            } else if (device.subcategory === 3) { // Motion sensors\n                sensors.motion.push(sensorData);\n            }\n        }\n    });\n\n    // Return structured data\n    return {\n        metadata: {\n            timestamp: new Date().toISOString(),\n            veraVersion: rawData.version,\n            model: rawData.model,\n            serialNumber: rawData.serial_number,\n            dataVersion: rawData.dataversion\n        },\n        rooms: rooms,\n        scenes: scenes,\n        devices: devices,\n        sensors: sensors,\n        summary: {\n            totalRooms: rooms.length,\n            totalScenes: scenes.length,\n            totalDevices: devices.length,\n            activeScenes: scenes.filter(s => s.active).length,\n            activeDevices: devices.filter(d => d.status === \"1\").length\n        }\n    };\n}\n\n// Main execution\ntry {\n    const rawData = msg.payload;\n    msg.payload = processVeraData(rawData);\n} catch (error) {\n    node.error(\"Error processing Vera data: \" + error.message, msg);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 620,
        "wires": [
            [
                "cdd529a3eac792d5",
                "93720c4d2e04b181"
            ]
        ]
    },
    {
        "id": "06b93171755103e4",
        "type": "debug",
        "z": "0c26b46cb750ccc4",
        "name": "vera_read_data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 720,
        "wires": []
    },
    {
        "id": "052b02afe6bde4e6",
        "type": "mqtt in",
        "z": "0c26b46cb750ccc4",
        "name": "vera_read_data-mqtt:52888",
        "topic": "vera_read_data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "4644b114d998fd7b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 620,
        "wires": [
            [
                "4781e1d6ba2b354e"
            ]
        ]
    },
    {
        "id": "343e07bb8b8db715",
        "type": "http request",
        "z": "0c26b46cb750ccc4",
        "name": "vera_data_full_http",
        "method": "use",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1450,
        "y": 660,
        "wires": [
            [
                "f5a68e5a2330e5bd"
            ]
        ]
    },
    {
        "id": "93720c4d2e04b181",
        "type": "function",
        "z": "0c26b46cb750ccc4",
        "name": "vera_data_full_http",
        "func": "// Preapir for HTTP\nlet jsonData = msg.payload;\n\n// Port\nlet port = '1904';\n\n// Set IP \n//let ip = '10.10.10.2'; \nlet ip = flow.get(\"con_ip\") || \"10.10.50.2\";\n\n// Create URL\nlet url = `http://${ip}:${port}`;\n\n// Create new message\nlet newMsg = {\n    payload: jsonData,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    method: \"GET\", // set request type\n    url: url\n};\n\n// return new message\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 660,
        "wires": [
            [
                "06b93171755103e4",
                "343e07bb8b8db715"
            ]
        ]
    },
    {
        "id": "5eb9c8fc43baf3ac",
        "type": "debug",
        "z": "0c26b46cb750ccc4",
        "name": "ver_read_data2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 620,
        "wires": []
    },
    {
        "id": "53640956de1eb97d",
        "type": "change",
        "z": "0c26b46cb750ccc4",
        "name": "device_status",
        "rules": [
            {
                "t": "set",
                "p": "con_ip",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 620,
        "wires": [
            [
                "70be4efe165d8c3b"
            ]
        ]
    },
    {
        "id": "4781e1d6ba2b354e",
        "type": "file in",
        "z": "0c26b46cb750ccc4",
        "name": "read_con_ip",
        "filename": "srv/con_ip",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 620,
        "wires": [
            [
                "53640956de1eb97d"
            ]
        ]
    },
    {
        "id": "f5a68e5a2330e5bd",
        "type": "debug",
        "z": "0c26b46cb750ccc4",
        "name": "ver_read_data2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 660,
        "wires": []
    },
    {
        "id": "4644b114d998fd7b",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt",
        "port": "52888",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "dfaffd1ad684d9c7",
        "type": "mios-server",
        "name": "gtlvera1",
        "host": "192.168.4.10",
        "port": 3480
    },
    {
        "id": "ddf6c62463d695e5",
        "type": "join-config",
        "name": "NodeRed",
        "register": false
    },
    {
        "id": "8d9e262ae3ae230d",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "influxdb",
        "port": "8086",
        "tls": false
    }
]