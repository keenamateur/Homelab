// Check if the topic is a string and not empty
if (typeof msg.topic !== "string" || msg.topic.trim() === "") {
    return null; // Ha nincs topic, ne küldjünk semmit
}

// Regex format: room:avdevicename:type
let regex = /^([^:]+):([^:]+):([^:]+)$/;

// Check if the topic matches the regex
let match = msg.topic.match(regex);

if (match) {
    let room = match[1];   
    let avdevicename = match[2]; 
    let type = match[3];   
    let avnewstatus = msg.payload;  


    // List of allowed rooms
    const allowedRooms = ["Nappali", "Konyha", "Fürdő", "Háló", "Terasz", "Biztonság", "Műhely", "Garázs", "Áram", "Szerver", "Szenzor"];

    // Only process if the room is one of the allowed rooms
    if (!allowedRooms.includes(room)) {
        return null; // Ha a szoba nem engedélyezett, ne küldjünk semmit
    }

    // Only process if the type is one of the allowed types
    const allowedTypes = ["Status", "LoadLevelStatus"];
    if (!allowedTypes.includes(type)) {
        return null;
    }
    // If the device name contains "Fali" and the type is "LoadLevelStatus"
    if (avdevicename.includes("Fali") && type === "LoadLevelStatus") {
        // Az érték megtartása
        avnewstatus = parseFloat(avnewstatus);
    } 
    // If the device name does not contain "Fali" and the type is "LoadLevelStatus"
    else if (avdevicename.includes("Fali") && type === "Status") {
        // If the type is "Status" and the device name contains "Fali"
        // we convert the boolean value to 1 or 0
        if (avnewstatus === true) avnewstatus = 1;
        else if (avnewstatus === false) avnewstatus = 0;
    }
    else if (type === "Status") {
        if (avnewstatus === true) avnewstatus = 1;
        else if (avnewstatus === false) avnewstatus = 0;
    }
    // If the type is "LoadLevelStatus" and the device name does not contain "Fali"
    else if (type === "Watts" || type === "Volts" || type === "Tripped") {
        avnewstatus = parseFloat(avnewstatus);
    }
    else {
        return null;
    }

    // Port
    let port = 1900;

    // Get IP address from flow context or msg.payload 

    let ip = flow.get("con_ip") || msg.payload;  // If the IP is not in flow context, use msg.payload

    if (!ip || typeof ip !== "string" || !ip.match(/^(\d{1,3}\.){3}\d{1,3}$/)) {
        return null; // If the IP is not valid, return null
    }

    // Create URL 
    let url = `http://${ip}:${port}`;

    // New message
    let newMsg = {
        payload: {
            room: room,
            avdevicename: avdevicename,
            avnewstatus: avnewstatus,
            type: type  // Add type to payload , some Dimmer devices send "LoadLevelStatus" as "Status" 
        },
        url: url  // URL
    };

    return newMsg;
} else {
    return null; // If regex does not match, return null
}